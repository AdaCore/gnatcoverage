-- =================================================================
-- == GPR file to build and use the support library for examples, ==
-- == with startup/init and minimum IO services                   ==
-- =================================================================

with "common";

library project Libsupport is

   Do_Build  : Common.Yes_No_Type := external ("LIBSUPPORT_BUILD", "no");
   --  Whether we're using this file to build the library or to link
   --  with it.

   Use_AUnit : Common.Yes_No_Type := external ("UNITTEST", "no");
   --  Whether we are building/using for an Aunit context or not, with
   --  influence on the last_chance handler inclusion.

   Use_Target_Source_Dirs : Common.Yes_No_Type
     := external ("USE_TARGET_SOURCE_DIRS", "no");
   --  Whether we are building/using for an Aunit context or not, with
   --  influence on the last_chance handler inclusion.

   Source_Dirs := ("src");
   --  Variable where we compute the Source_Dirs attribute to use,
   --  depending on the target, the board, and on the use of Aunit.

   --  Common library attributes:
   --  ==========================

   for Library_Kind use "static";
   for Library_Auto_Init use "False";
   for Languages use ("Ada", "C");

   for Library_Dir use "lib/" & Common.Target;
   for Object_Dir use "obj/" & Common.Target;

   --  We might have needs for both aunit and !aunit libs for a run
   --  so pick a different libname for each case:

   case Use_AUnit is
      when "yes" =>
         for Library_Name use "supportaunit";
      when "no" =>
         for Library_name use "support";
   end case;

   case Do_Build is
      when "no"  => for Externally_Built use "true";
      when "yes" => for Externally_Built use "false";
   end case;

   case Use_Target_Source_Dirs is
      when "no" => null;

      when "yes" =>
         --  Now compute the set of source directories to use. A common one,
         --  always, then an additional Target specific one. FOR SELDOM USES
         --  ONLY. We don't wan't yet another zfp support approx here:

         Source_Dirs := Source_Dirs & ("src/memory");
         Source_Dirs := Source_Dirs & ("src/" & Common.Target);

         --  Add whatever we need to find our Last Chance Handler, to
         --  force termination even in ravenscar configurations, and to
         --  produce consistent output on unhandled exceptions.

         --  Aunit has its own handler that we must not override though.

         case Use_AUnit is
           when "yes" => null;
           when "no" =>
              --  Termination on some boards incur very specific protocols
              --  that the target RTS might not support. Allow board specific
              --  overrides of the last chance handler:

              Source_Dirs := Source_Dirs & ("src/last_chance_" & Common.Board);
         end case;

    end case;

   for Source_Dirs use Source_Dirs;

   --  Make sure recursive project file inclusions don't get
   --  to produce reports for parts of this support lib, never
   --  relevant to test results.

   package Coverage is
     for Units use ();
   end Coverage;

end Libsupport;
