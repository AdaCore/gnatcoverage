# This support Makefile is a helper for examples packaged together with
# GNATcoverage.

# It is useful both to factorize the work for different examples and to
# illustrate a typical coverage data generation sequence for a program
# starting from sources.

# The intent is to have this Makefile invoked from the example dedicated
# directories, with users just running "make" to see the sequences.

# Each individual example is expected to provide
#
# - Some source code subject to coverage analysis, exercised by one or several
#   test drivers (main subprograms) calling into the code.  Test drivers
#   should be named test_<something> and the set of drivers of relevance for
#   a given exmple should be listed in the TESTS Makefile variable.
#
# - A general project file named after the example subdirectory (foo.gpr for
#   an example located in subdirectory foo), used to build, without a Main
#   attribute (providing a Source_Dirs at least, Object_Dir possibly, ...)

# The basic idea is, first for each test driver, to:
#
#  1/ Build the program binary executable from the sources
#  2/ Run it through "gnatcov run" to get an execution trace
#  3/ Use "gnatcov coverage" to produce a report out of the trace
#
# Then, optionally, as determined by the CONSOLIDATE variable value
# for the example as a whole:
#
#  4/ Use gnatcov coverage to produce a consolidated report, from all the test
#     traces or from checkpoints.

# Set of main target programs for which we want to produce coverage info,
# to be defined from the command line or by includers:
# TESTS=

# To produce a consolidated report combining the effects of all the test
# drivers, set to 'traces' or 'checkpoints' from includers or command line:
# CONSOLIDATE=

# User arguments to pass to the builder
BUILDFLAGS=

# Kind of coverage analysis to be performed (--level argument)
XCOVLEVEL?=stmt+decision

include ../support/Makefile.common

# ----------------------------------------------------------------------------
# Object vs source coverage action variants for common rules
# ----------------------------------------------------------------------------

# We're only interested in results for our applicative units, not for test
# drivers or for the test-harness code in the Aunit case. We expect the list
# of units of interest to remain the same across all the tests participating
# in a given example.

ALIS_LIST=alis.list
ROUTINES_LIST=routines.list

# Beware that these actions may be involved in different rules, so some
# automatic variables like $< don't expand the same across actions.

OBJECT_LEVELS=branch insn
SOURCE_LEVELS=stmt stmt+decision stmt+mcdc

BINDIR = obj/$(TARGET)
BASEDIR = $(notdir $(CURDIR))

ifneq ($(filter $(OBJECT_LEVELS), $(XCOVLEVEL)),)

  # Object coverage: use --routines to filter. Compile with -g to
  # allow annotated-source report formats.

  INTERNALBUILDFLAGS = -g
  XCOVFILTER_LIST=$(ROUTINES_LIST)
  XCOVFILTER=--routines=@$(XCOVFILTER_LIST)
  XCOVRUN=$(XCOV) run \
    $(XCOVTARGET) --level=$(XCOVLEVEL) $(BINDIR)/$* -o $*.trace

else
ifneq ($(filter $(SOURCE_LEVELS), $(XCOVLEVEL)),)

  # Source coverage: force -g -fdump-scos -fpreserve-control-flow, use --scos
  # to filter and pass the filter to xcov run so that it has visibility on
  # decision locations

  INTERNALBUILDFLAGS = -cargs -g -fdump-scos -fpreserve-control-flow
  XCOVFILTER_LIST=$(ALIS_LIST)
  XCOVFILTER=--scos=@$(XCOVFILTER_LIST)
  XCOVRUN=$(XCOV) run \
    $(XCOVTARGET) --level=$(XCOVLEVEL) $(XCOVFILTER) $(BINDIR)/$* -o $*.trace
endif
endif

# Argument we will pass to the builder eventually
BUILDERFLAGS=$(INTERNALBUILDFLAGS) $(BUILDFLAGS)

ALL_TESTS=$(TESTS) $(AUNIT_TESTS)

.PRECIOUS: %.trace

all: build $(XCOVFILTER_LIST) trace analyze consolidate-$(CONSOLIDATE)

announce-%: force
	@echo "--------------" $* "--------------"

# -------------------------------------------------------------------------
# routines or alis list construction targets
# -------------------------------------------------------------------------

# This is part of the early "all" prerequisites, built once for all the
# tests attached to a given example.

$(ALIS_LIST): announce-alis-list force
	ls $(wildcard $(BINDIR)/*.ali) | grep -v test_ > $@

$(ROUTINES_LIST): announce-routines-list force
	$(XCOV) disp-routines $(wildcard $(BINDIR)/*.o) | grep -v test_ > $@

# -------------------------------------------------------------------------
# consolidation targets
# -------------------------------------------------------------------------

ALL_CHECKPOINTS=$(ALL_TESTS:%=%.ckpt)
ALL_TRACES=$(ALL_TESTS:%=%.trace)

consolidate-:

consolidate-checkpoints: announce-consolidate-checkpoints
consolidate-checkpoints: out-all-checkpoints/index.html

ckpt.list: force
	$(RM) -f $@ && touch $@
	for ckpt in $(ALL_CHECKPOINTS); do echo $$ckpt >> $@; done

out-all-checkpoints/index.html: out-all-checkpoints $(ALL_CHECKPOINTS) ckpt.list
	$(XCOV) coverage --level=$(XCOVLEVEL) \
	 --checkpoint=@ckpt.list \
	 --annotate=dhtml --output-dir=$(dir $@)

%.ckpt: %.trace
	$(XCOV) coverage $(XCOVFILTER) --level=$(XCOVLEVEL) \
	 --save-checkpoint=$@ $*.trace

consolidate-traces: announce-consolidate-traces
consolidate-traces: out-all-traces/index.html

out-all-traces/index.html: out-all-traces $(ALL_TRACES)
	$(XCOV) coverage $(XCOVFILTER) --level=$(XCOVLEVEL) \
	 --annotate=dhtml $(ALL_TRACES) \
	 --output-dir $(dir $@)

# -----------------------------------------------------------------------
# analyze: produce annotated sources or html from a trace file and
#          the corresponding executable
# -----------------------------------------------------------------------

analyze: announce-analyze
analyze: $(ALL_TESTS:%=out-%/index.html)

.PRECIOUS: out-%

out-%: force
	$(RM) -rf $@
	$(MKDIR) $@

out-%/index.html: out-% %.trace
	$(XCOV) coverage $(XCOVFILTER) \
	 --level=$(XCOVLEVEL) --annotate=dhtml $*.trace --output-dir $(dir $@)

out-%/index.xml: out-% %.trace
	$(XCOV) coverage $(XCOVFILTER) \
	 --level=$(XCOVLEVEL) --annotate=xml $*.trace --output-dir $(dir $@)

out-%/report.txt: out-% %.trace
	$(XCOV) coverage $(XCOVFILTER) \
	 --level=$(XCOVLEVEL) --annotate=report $*.trace -o $@

# -----------------------------------------------------------------------
# trace: produce execution trace from executable program execution
#        within instrumented target emulation environment
# -----------------------------------------------------------------------

trace: announce-trace
trace: $(ALL_TESTS:%=%.trace)

%.trace: % force
	$(XCOVRUN)

# -----------------------------------------------------------------------
# build: produce executable program from sources + target bsp
# -----------------------------------------------------------------------

build: $(ALL_TESTS)

$(ALL_TESTS): announce-build-tests

$(TESTS): libsupport force
	$(BUILDER) -q -f -p $@.adb -P$(BASEDIR).gpr $(BUILDERFLAGS)

$(AUNIT_TESTS): libsupport force
	$(BUILDER) -q -f -p $@.adb -Pharness.gpr \
	 -XUNITTEST=yes -XPLATFORM=$(TARGET) $(BUILDERFLAGS)

MKSUPPORT=$(MAKE) -C $(SUPPORT_DIR) -f Makefile.libsupport

libsupport: announce-build-libsupport
	$(MKSUPPORT) all

# -----------------------------------------------------------------------
# Housekeeping
# -----------------------------------------------------------------------

clean:
	$(MKSUPPORT) clean
	$(RM) -rf obj lib out-*
	$(RM) -f *.bin *.dmap *.cgpr *.trace.* *.trace *~ \
                 *.xcov *.html *.css *.xml $(TESTS) \
                 *.list

.PHONY: force clean
