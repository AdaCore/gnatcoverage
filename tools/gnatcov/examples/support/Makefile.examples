# This support Makefile is a helper for examples packaged together with
# GNATcoverage.  The intent is to have this Makefile invoked from the example
# dedicated directories.

# It is useful both to factorize the work for different examples and to
# illustrate a typical coverage data generation sequence for a program
# starting from sources.

# The basic idea is
#  1/ Build the program binary executable from the sources
#  2/ Run it through qemu to get execution traces
#  3/ Use gnatcov to produce user level coverage data from the traces

# Set of main target programs for which we want to produce coverage info,
# to be defined from the command line or by includers:
# TESTS=

# User arguments to pass to the builder
BUILDFLAGS=

# Kind of coverage analysis to be performed (--level argument)
XCOVLEVEL?=stmt+decision

include ../support/Makefile.common

# ----------------------------------------------------------------------------
# Object vs source coverage action variants for common rules
# ----------------------------------------------------------------------------

# In e.g. the Aunit case, we're only interested in results for our applicative
# objects so query for the specific list of relevant symbols, which implicitly
# excludes (hence doesn't list) results for the test-harness code.

# Beware that these actions may be involved in different rules, so some
# automatic variables like $< don't expand the same across actions.

OBJECT_LEVELS=branch insn
SOURCE_LEVELS=stmt stmt+decision stmt+mcdc

BINDIR = obj/$(TARGET)
BASEDIR = $(notdir $(CURDIR))

ifneq ($(filter $(OBJECT_LEVELS), $(XCOVLEVEL)),)

  # Object coverage: use --routines to filter. Compile with -g to
  # allow annotated-source report formats.

  INTERNALBUILDFLAGS = -g
  GENXCOVLIST=\
    $(XCOV) disp-routines $(wildcard $(BINDIR)/*.o) | grep -v test_ > $*-routines.list
  XCOVFILTER=--routines=@$*-routines.list
  XCOVRUN=$(XCOV) run \
    $(XCOVTARGET) --level=$(XCOVLEVEL) $(BINDIR)/$< -o $<.trace

else
ifneq ($(filter $(SOURCE_LEVELS), $(XCOVLEVEL)),)

  # Source coverage: force -g -fdump-scos -fpreserve-control-flow, use --scos
  # to filter and pass the filter to xcov run so that it has visibility on
  # decision locations

  INTERNALBUILDFLAGS = -cargs -g -fdump-scos -fpreserve-control-flow
  GENXCOVLIST=\
    ls $(wildcard $(BINDIR)/*.ali) | grep -v test_ > $*-alis.list
  XCOVFILTER=--scos=@$*-alis.list
  XCOVRUN=$(XCOV) run \
    $(XCOVTARGET) --level=$(XCOVLEVEL) $(XCOVFILTER) $(BINDIR)/$< -o $<.trace
endif
endif

# Argument we will pass to the builder eventually
BUILDERFLAGS=$(INTERNALBUILDFLAGS) $(BUILDFLAGS)

ALL_TESTS=$(TESTS) $(UNIT_TESTS)

.PRECIOUS: %.trace

all: build trace analyze consolidate-$(CONSOLIDATE)

announce-%: force
	@echo "--------------" $* "--------------"

# -------------------------------------------------------------------------
# consolidation targets
# -------------------------------------------------------------------------

ALL_CHECKPOINTS=$(ALL_TESTS:%=%.ckpt)
ALL_TRACES=$(ALL_TESTS:%=%.trace)

consolidate-:

consolidate-checkpoints: announce-consolidate-checkpoints
consolidate-checkpoints: out-all-checkpoints out-all-checkpoints/index.html

ckpt.list: force
	$(RM) -f $@ && touch $@
	for ckpt in $(ALL_CHECKPOINTS); do echo $$ckpt >> $@; done

out-all-checkpoints/index.html: $(ALL_CHECKPOINTS) ckpt.list
	$(XCOV) coverage --level=$(XCOVLEVEL) \
	 --checkpoint=@ckpt.list \
	 --annotate=dhtml --output-dir=$(dir $@)

%.ckpt: out-temp %.trace
	$(XCOV) coverage $(XCOVFILTER) --level=$(XCOVLEVEL) \
	 --save-checkpoint=$@ $*.trace \
	 --annotate=xcov --output-dir=out-temp

consolidate-traces: announce-consolidate-traces
consolidate-traces: out-all-traces out-all-traces/index.html

out-all-traces/index.html: $(ALL_TRACES)
	$(XCOV) coverage $(XCOVFILTER) --level=$(XCOVLEVEL) \
	 --annotate=dhtml $(ALL_TRACES) \
	 --output-dir $(dir $@)

# -----------------------------------------------------------------------
# analyze: produce annotated sources or html from a trace file and
#          the corresponding executable
# -----------------------------------------------------------------------

analyze: announce-analyze
analyze: $(ALL_TESTS:%=out-%) $(ALL_TESTS:%=out-%/index.html)

out-%: force
	$(RM) -rf $@
	$(MKDIR) $@

out-%/index.html: %.trace
	$(XCOV) coverage $(XCOVFILTER) \
	 --level=$(XCOVLEVEL) --annotate=dhtml $< --output-dir $(dir $@)

out-%/index.xml: %.trace
	$(XCOV) coverage $(XCOVFILTER) \
	 --level=$(XCOVLEVEL) --annotate=xml $< --output-dir $(dir $@)

out-%/report.txt: %.trace
	$(XCOV) coverage $(XCOVFILTER) \
	 --level=$(XCOVLEVEL) --annotate=report $< -o $@

# -----------------------------------------------------------------------
# trace: produce execution trace from executable program execution
#        within instrumented target emulation environment
# -----------------------------------------------------------------------

trace: announce-trace
trace: $(ALL_TESTS:%=%.trace)

%.trace: % force
# Generate the filtering list here, as we might need to pass it to
# gnatcov run and always need to pass it to gnatcov coverage.

	$(GENXCOVLIST)

# Then echo the command we're planning to run while our term is functional,
# and run silently in between the possibly required stty adjustments. Make
# sure the latter executes in sequence entirely so that tty gets restored
# even if XCOVRUN fails for whatever reason.

	@echo $(XCOVRUN)
	@$(STTY_ADJUST) $(XCOVRUN); $(STTY_RESTORE) echo

# -----------------------------------------------------------------------
# build: produce executable program from sources + target bsp
# -----------------------------------------------------------------------

build: announce-build
build: $(ALL_TESTS)

$(TESTS): libsupport force
	$(BUILDER) -f -p $@.adb -P$(BASEDIR).gpr $(BUILDERFLAGS)

$(UNIT_TESTS): libsupport force
	$(BUILDER) -f -p -Pharness $(BUILDERFLAGS)\
	-XRUNTIME=zfp -XUNITTEST=yes -XPLATFORM=$(TARGET)

MKSUPPORT=$(MAKE) -C $(SUPPORT_DIR) -f Makefile.libsupport

libsupport:
	$(MKSUPPORT) all

# -----------------------------------------------------------------------
# Housekeeping
# -----------------------------------------------------------------------

clean:
	$(MKSUPPORT) clean
	$(RM) -rf obj lib out-*
	$(RM) -f *.bin *.dmap *.cgpr *.trace.* *.trace *~ \
                 *.xcov *.html *.css *.xml $(TESTS) *.list

.PHONY: force clean
