# This support Makefile is a helper for examples packaged together with
# GNATcoverage.

# It is useful both to factorize the work for different examples and to
# illustrate a typical coverage data generation sequence for a program
# starting from sources.

# The intent is to have this Makefile invoked from the example dedicated
# directories, with users just running "make" to see the sequences.

# Each individual example is expected to provide
#
# - Some source code subject to coverage analysis, exercised by one or several
#   test drivers (main subprograms) calling into the code.  Test drivers
#   should be named test_<something> and the set of drivers of relevance for
#   a given exmple should be listed in the TESTS Makefile variable.
#
# - A general project file named after the example subdirectory (foo.gpr for
#   an example located in subdirectory foo), used to build, without a Main
#   attribute (providing a Source_Dirs at least, Object_Dir possibly, ...)

# The basic idea is, first for each test driver, to:
#
#  1/ Instrument the source code
#  2/ Build the program binary executable from the instrumented sources
#  3/ Run it (possibly through GNATemulator) to get an execution trace
#  4/ Use "gnatcov coverage" to produce a report out of the trace
#
# Then, optionally, as determined by the CONSOLIDATE variable value
# for the example as a whole:
#
#  4/ Use gnatcov coverage to produce a consolidated report, from all the test
#     traces or from checkpoints.

# Set of main target programs for which we want to produce coverage info,
# to be defined from the command line or by includers:
# TESTS=

# To produce a consolidated report combining the effects of all the test
# drivers, set to 'traces' or 'checkpoints' from includers or command line:
# CONSOLIDATE=

# User arguments to pass to the builder
BUILDFLAGS=

# Kind of coverage analysis to be performed (--level argument)
XCOVLEVEL?=stmt+decision

include ../support/Makefile.common

# Beware that these actions may be involved in different rules, so some
# automatic variables like $< don't expand the same across actions.

SOURCE_LEVELS=stmt stmt+decision stmt+mcdc

BINDIR = obj/$(TARGET)
BASEDIR = $(notdir $(CURDIR))

# Source coverage: pass --src-subdirs and --implicit-with.
INTERNALBUILDFLAGS = --src-subdirs=gnatcov-instr --implicit-with=gnatcov_rts

# Argument we will pass to the builder eventually
BUILDERFLAGS=$(INTERNALBUILDFLAGS) $(BUILDFLAGS) $(EXTRA_CARGS)

ALL_TESTS=$(TESTS) $(AUNIT_TESTS)

.PRECIOUS: %.trace

all: build trace analyze consolidate-$(CONSOLIDATE)

announce-%: force
	@echo "--------------" $* "--------------"

# -------------------------------------------------------------------------
# consolidation targets
# -------------------------------------------------------------------------

ALL_CHECKPOINTS=$(ALL_TESTS:%=%.ckpt)
ALL_TRACES=$(ALL_TESTS:%=%.srctrace)

consolidate-:

consolidate-checkpoints: announce-consolidate-checkpoints
consolidate-checkpoints: out-all-checkpoints/index.html

ckpt.list: force
	$(RM) -f $@ && touch $@
	for ckpt in $(ALL_CHECKPOINTS); do echo $$ckpt >> $@; done

out-all-checkpoints/index.html: out-all-checkpoints $(ALL_CHECKPOINTS) ckpt.list
	$(XCOV) coverage $(XCOV_TARGETARGS) --level=$(XCOVLEVEL) \
	 --checkpoint=@ckpt.list \
	 --annotate=html \
	 --output-dir=$(dir $@)

%.ckpt: %.srctrace
	$(ENV_UPDATE) $(XCOV) coverage $(XCOV_TARGETARGS) -P$(BASEDIR).gpr \
	 --level=$(XCOVLEVEL) \
	 --save-checkpoint=$@ $*.srctrace

consolidate-traces: announce-consolidate-traces
consolidate-traces: out-all-traces/index.html

out-all-traces/index.html: out-all-traces $(ALL_TRACES)
	$(ENV_UPDATE) $(XCOV) coverage $(XCOV_TARGETARGS) -P$(BASEDIR).gpr \
	 --level=$(XCOVLEVEL) \
	 --annotate=html $(ALL_TRACES) \
	 --output-dir $(dir $@)

# -----------------------------------------------------------------------
# analyze: produce annotated sources or html from a trace file and
#          the corresponding executable
# -----------------------------------------------------------------------

analyze: announce-analyze
analyze: $(ALL_TESTS:%=out-%/index.html)

.PRECIOUS: out-%

out-%: force
	$(RM) -rf $@
	$(MKDIR) $@

out-%/index.html: out-% %.srctrace
	$(ENV_UPDATE) $(XCOV) coverage $(XCOV_TARGETARGS) -P$(BASEDIR).gpr \
	 --level=$(XCOVLEVEL) \
	 --annotate=html \
	 --output-dir $(dir $@) \
	 $*.srctrace

out-%/index.xml: out-% %.srctrace
	$(ENV_UPDATE) $(XCOV) coverage $(XCOV_TARGETARGS) -P$(BASEDIR).gpr \
	 --level=$(XCOVLEVEL) \
	 --annotate=xml $*.srctrace \
	 --output-dir $(dir $@)

out-%/report.txt: out-% %.srctrace
	$(ENV_UPDATE) $(XCOV) coverage $(XCOV_TARGETARGS) -P$(BASEDIR).gpr \
	 --level=$(XCOVLEVEL) \
	--annotate=report \
	-o $@ \
	$*.srctrace

# -----------------------------------------------------------------------
# trace: produce execution trace from executable program execution
#        within instrumented target emulation environment
# -----------------------------------------------------------------------

trace: announce-trace
trace: $(ALL_TESTS:%=%.srctrace)

%.srctrace: % force
ifneq ($(XCOVTARGET),)
	$(GNATEMU) $(BINDIR)/$* > $*.b64trace
	$(XCOV) extract-base64-trace $*.b64trace $*.srctrace
else
	GNATCOV_TRACE_FILE=$*.srctrace $(BINDIR)/$*
endif

# -----------------------------------------------------------------------
# build: produce executable program from sources + target bsp
# -----------------------------------------------------------------------

build: $(ALL_TESTS)

$(ALL_TESTS): announce-build-tests

$(TESTS): libsupport gnatcov_rts force
	$(ENV_UPDATE) $(XCOV) instrument -q -P$(BASEDIR).gpr $(XCOV_TARGETARGS) \
	 --level=$(XCOVLEVEL) $@.adb
	$(ENV_UPDATE) $(BUILDER) -q -f -p $@.adb -P$(BASEDIR).gpr $(BUILDERFLAGS)

$(AUNIT_TESTS): libsupport gnatcov_rts force
	$(ENV_UPDATE) $(XCOV) instrument -q $(XCOV_TARGETARGS) -Pharness.gpr \
	 --level=$(XCOVLEVEL) \
	 -XUNITTEST=yes \
	 -XPLATFORM=$(TARGET)
	$(ENV_UPDATE) $(BUILDER) -q -f -p $@.adb -Pharness.gpr \
	 -XUNITTEST=yes \
	 -XPLATFORM=$(TARGET) \
	 $(BUILDERFLAGS)

MKSUPPORT=$(MAKE) -C $(SUPPORT_DIR) -f Makefile.libsupport \
 TARGET=$(TARGET) RTS=$(RTS) BOARD=$(BOARD)

gnatcov_rts: announce-gnatcov-setup force
	rm -rf $(RTS_DIR)
	$(XCOV) setup -q --prefix=$(RTS_DIR) $(GPR_ARGS)

libsupport: announce-build-libsupport
	$(MKSUPPORT) all

# -----------------------------------------------------------------------
# Housekeeping
# -----------------------------------------------------------------------

clean:
	$(MKSUPPORT) clean
	$(RM) -rf obj lib out-* $(RTS_DIR)
	$(RM) -f *.bin *.dmap *.cgpr *.srctrace *.b64trace *~ \
                 *.xcov *.html *.css *.xml $(TESTS) \
                 *.list *.ckpt

.PHONY: force clean
