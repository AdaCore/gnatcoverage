with "gnat_util", "gnatcoll", "gpr2", "libadalang", "libclang";

with "rts/gnatcov_rts";

project Gnatcov is

   --  This project file participates in the build of a variety of programs
   --  that use all or part-of the sources in the project's subdirectory. Such
   --  progrms include the "gnatcov" driver, the "gnatcov32/64" tools or the
   --  trace adapters.

   --  We provide scenario variables to control some aspects of what the
   --  sources include, such as whether the tool is intended to process 32 or
   --  64 binaries or whether it needs to include a fully functional source
   --  instrumenter. The control of what parameter makes sense for each actual
   --  program is not decided by this project file, and when this project file
   --  is used as a root project to build gnatcov* executables, build commands
   --  are expected to state the Mains on the on the command line along
   --  with the associated parameters.

   --  The size of addresses we expect the tool we build will handle. For
   --  gnatcov* programs, this also controls the subdir where the executable
   --  is placed. Default to "64" as we build 64bit binaries only. Only those
   --  that explicitly request to handle 32bit addresses will end up in the
   --  32bit specific object dir.

   type Bits_Type is ("32", "64");
   Bits : Bits_Type := external("ARCH", "64");

   Binutils_Src_Dir := external ("BINUTILS_SRC_DIR");
   Binutils_Build_Dir := external ("BINUTILS_BUILD_DIR", Binutils_Src_Dir);

   --  Build mode. Default to "dev" to make it shorter for developers.
   --  The other modes are for nightly scripts and are better made explicit
   --  anyway:

   type Build_Mode_Type is ("dev", "prod", "boot");
   Build_Mode : Build_Mode_Type := external("BUILD_MODE", "dev");

   --  Whether the tool we build needs to include source instrumentation
   --  support at all, then for C more specifically:

   type Boolean is ("False", "True");
   Instrument_Support : Boolean := external("INSTRUMENT_SUPPORT", "True");
   C_Support          : Boolean := external("C_SUPPORT", Instrument_Support);

   package Naming is
      for Specification ("Arch") use "arch__" & Bits & ".ads";
      for Specification ("Qemu_Traces_Entries")
         use"qemu_traces_entries__" & Bits & ".ads";

      --  Tools that don't need instrumentation support might nevertheless
      --  rely on sources that drag dependencies on the "instrument" source
      --  unit, even though the instrumentation feature is never actually
      --  used. Provide a stub body for such tools, which significantly
      --  reduces the size of executables:

      case Instrument_Support is
         when "False" =>
            for Body ("Instrument") use "instrument__stub.adb";
         when "True" =>
            null;
      end case;

      case C_Support is
         when "False" =>
            for Specification ("Instrument.C") use "instrument-c__stub.ads";
            for Body ("Instrument.C") use "instrument-c__stub.adb";
         when "True" =>
            null;
      end case;

      for Body_Suffix ("C++") use ".cc";
   end Naming;

   package Builder is
      for Executable ("gnatcov_bits_specific.adb") use "gnatcov" & Bits;
   end Builder;

   package Compiler is

      Ada_Common_Switches :=
        ("-gnat12", "-gnatwa", "-gnatyg");

      C_Common_Switches :=
        ("-DTARGET_BITS=" & Bits, "-Wall", "-Wextra", "-std=c99",
         "-I" & Binutils_Build_Dir & "/bfd",
         "-I" & Binutils_Src_Dir & "/include",
         "-I" & Binutils_Src_Dir & "/bfd");

      Mode_Switches := ();
      Ada_Mode_Switches := ();
      C_Mode_Switches := ();
      CPP_Mode_Switches := ();

      case Build_Mode is
         when "dev" =>
            Mode_Switches := ("-O0", "-g");
            Ada_Mode_Switches := ("-gnata");
            C_Mode_Switches := ("-Werror");
            CPP_Mode_Switches := ("-Werror");

         when "prod" =>
            Mode_Switches := ("-O2");
            C_Mode_Switches := ("-DNDEBUG");
            CPP_Mode_Switches := ("-DNDEBUG");

         when "boot" =>
            Mode_Switches :=
              ("-O1", "-fdump-scos", "-fpreserve-control-flow", "-g");
            C_Mode_Switches := ("-DNDEBUG");
            CPP_Mode_Switches := ("-DNDEBUG");
      end case;

      for Default_Switches ("ada")
        use Ada_Common_Switches & Mode_Switches & Ada_Mode_Switches;

      for Default_Switches ("C")
        use C_Common_Switches & Mode_Switches & C_Mode_Switches;

      for Default_Switches ("C++")
        use Mode_Switches & CPP_Mode_Switches;

      for Local_Configuration_Pragmas use "gnat.adc";

      --  As we don't want to compile with clang++ (compilation of
      --  clang-wrapper.cc errors out), force the use of g++.

      for Driver ("C++") use "g++";
   end Compiler;

   package Linker is
      for Required_Switches use
        (Binutils_Build_Dir & "/opcodes/libopcodes.a",
         Binutils_Build_Dir & "/bfd/libbfd.a",
         Binutils_Build_Dir & "/libiberty/libiberty.a",
         "-lz",
         "-static-libstdc++",
         "-static-libgcc");
   end Linker;

   package Binder is
      case Build_Mode is
        when "dev" =>
           for Default_Switches ("Ada") use ("-Es");
         when others =>
            null;
      end case;
   end Binder;

   package IDE is
      for VCS_Kind use "git";
      for VCS_Repository_Root use "../..";
   end IDE;

   for Source_Dirs use (".", "libopcodes_bind");
   case C_Support is
      when "False" =>
         for Excluded_Source_Files use ("clang-wrapper.cc");
      when others =>
         null;
   end case;

   for Object_Dir use "obj" & Bits & "/" & Build_Mode;
   for Languages use ("Ada", "C", "C++");

end Gnatcov;
