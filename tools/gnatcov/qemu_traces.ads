------------------------------------------------------------------------------
--                                                                          --
--                               GNATcoverage                               --
--                                                                          --
--                     Copyright (C) 2008-2012, AdaCore                     --
--                                                                          --
-- GNATcoverage is free software; you can redistribute it and/or modify it  --
-- under terms of the GNU General Public License as published by the  Free  --
-- Software  Foundation;  either version 3,  or (at your option) any later  --
-- version. This software is distributed in the hope that it will be useful --
-- but WITHOUT ANY WARRANTY;  without even the implied warranty of MERCHAN- --
-- TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public --
-- License for  more details.  You should have  received  a copy of the GNU --
-- General  Public  License  distributed  with  this  software;   see  file --
-- COPYING3.  If not, go to http://www.gnu.org/licenses for a complete copy --
-- of the license.                                                          --
------------------------------------------------------------------------------
with Interfaces; use Interfaces;

package Qemu_Traces is

   --  Execution of a program with 'gnatcov run' produces an "Execution Trace"
   --  file, possibly controlled by an internal "Trace Control" file for the
   --  simulation engine to help the support of mcdc like coverage criteria.

   --  The Trace Control simulation input contains a list of addresses ranges
   --  for which branch history is needed. This is computed by xcov from SCO
   --  decision entries, and is referred to as a Decision Map.

   --  The Execution Trace output contains a list of execution trace entries
   --  generated by the simulation engine, preceded by a list of trace
   --  information entries produced by gnatcov for items such as the path to
   --  the binary file or a user provided tag string.

   --  Here is a quick sketch of the information flow:

   --                           gnatcov run                Execution Trace
   --                               |                            |
   --                               v                            v
   --                 o--------------------------------o   --------------
   --                 |    gen info section -----------|-->|Info section|
   --                 |    (date, exe file,...)        |   |------------|
   --                 |                         QEMU --|-->|Exec section|
   --  SCO decision --|--> gen decision map -----^     |   --------------
   --  entries,       |    -----------------           |
   --  for mcdc       |    |Control section|           |
   --                 |    -----------------           |
   --                 o--------------------------------o

   --  All the files sections feature a section header followed by a sequence
   --  of entries. The section header structure is identical in all cases, and
   --  always conveys some trace related data (trace control, trace context
   --  info, or actual execution trace), identified by a Kind field.

   --  The decision map file general structure is then:

   --      -------
   --      |SH   |    Section Header .Kind = Decision_Map
   --      |TCE[]|    Sequence of Trace Control Entries
   --      -------

   --  And that of the output execution tracefile is:

   --      -------
   --      |SH   |    Section Header .Kind = Info
   --      |TIE[]|    Sequence of Trace Info Entries
   --      |-----|
   --      |SH   |    Section Header .Kind = Flat|History
   --      |ETE[]|    Sequence of Exec Trace Entries
   --      -------

   -------------------------
   -- File Section Header --
   -------------------------

   --  Must be kept consistent with the C version in qemu-traces.h

   subtype Magic_String is String (1 .. 12);

   Qemu_Trace_Magic : constant Magic_String := "#QEMU-Traces";
   --  Expected value of the Magic field.

   Qemu_Trace_Version : constant Unsigned_8 := 1;
   --  Current version

   type Trace_Kind is (Flat, History, Info, Decision_Map);
   for Trace_Kind use
     (Flat         => 0,   --  flat exec trace (qemu)
      History      => 1,   --  exec trace with history (qemu)
      Info         => 2,   --  info section (gnatcov)
      Decision_Map => 3);  --  history control section (gnatcov, internal)
   for Trace_Kind'Size use 8;

   type Trace_Header is record
      Magic : Magic_String;      --  Magic string
      Version : Unsigned_8;      --  Version of file format
      Kind : Trace_Kind;         --  Section kind

      Sizeof_Target_Pc : Unsigned_8;
      --  Size of Program Counter on target, in bytes

      Big_Endian : Boolean;
      --  True if the host is big endian

      Machine_Hi : Unsigned_8;
      Machine_Lo : Unsigned_8;
      --  Target ELF machine ID

      Padding : Unsigned_16;
      --  Reserved, must be set to 0
   end record;

   ----------------------------------------------
   -- Trace Information Section (.Kind = Info) --
   ----------------------------------------------

   --  The section header fields after Kind (but big_endian) should be 0.

   --  The section contents is a sequence of Trace Info Entries, each with a
   --  Trace Info Header followed by data. Data interpretation depends on the
   --  entry Kind found in the item header.  We expect an Info_End kind of
   --  entry to finish the sequence.

   type Info_Kind_Type is
     (Info_End, Exec_File_Name, Coverage_Options, User_Data, Date_Time,
      Kernel_File_Name);

   type Trace_Info_Header is record
      Info_Kind   : Unsigned_32;
      --  Info_Kind_Type'Pos, in endianness indicated by file header

      Info_Length : Unsigned_32;
      --  Length of associated real data. This must be 0 for Info_End.

   end record;

   --  The amount of space actually occupied in the file for each entry is
   --  always rounded up for alignment purposes. This is NOT reflected in
   --  the Info_Length header field.

   Trace_Info_Alignment : constant := 4;

   --  This is the structure of a Date_Time kind of entry:

   type Trace_Info_Date is record
      Year  : Unsigned_16;
      Month : Unsigned_8;   --  1 .. 12
      Day   : Unsigned_8;   --  1 .. 31
      Hour  : Unsigned_8;   --  0 .. 23
      Min   : Unsigned_8;   --  0 .. 59
      Sec   : Unsigned_8;   --  0 .. 59
      Pad   : Unsigned_8;   --  0
   end record;

   ---------------------------------------------------
   -- Execution Trace Section (.Kind = Raw|History) --
   ---------------------------------------------------

   --  The section contents is a sequence of Trace Entries. There is no
   --  explicit sequence termination entry ; we expect the section to end with
   --  the container file.

   --  Each trace entry conveys OPerational data about a range of machine
   --  addresses, most often execution of a basic block terminated by a branch
   --  instruction. These have slightly different representations for 32 and
   --  64 bits targets.

   --  Flat sections are meant to convey the directions taken by branches as
   --  observed locally, independently of their execution context.  This
   --  limits the output to at most two entries per block (one per possible
   --  branch outcome) and doesn't allow mcdc computation.

   --  History sections are meant to allow mcdc computation, so report block
   --  executions and branch outcomes in the relevant cases, as directed by
   --  the simulator decision map input.

   type Trace_Entry64 is record
      Pc   : Unsigned_64;
      Size : Unsigned_16;
      Op   : Unsigned_8;
      Pad0 : Unsigned_8;
      Pad1 : Unsigned_32;
   end record;

   type Trace_Entry32 is record
      Pc   : Unsigned_32;
      Size : Unsigned_16;
      Op   : Unsigned_8;
      Pad0 : Unsigned_8;
   end record;

   --  The Operation conveyed is a bitmask of the following possibilities:

   Trace_Op_Block : constant Unsigned_8 := 16#10#;
   --  Basic block pc .. pc+size-1 was executed

   Trace_Op_Fault : constant Unsigned_8 := 16#20#;
   --  Machine fault occurred at pc

   Trace_Op_Br0 : constant Unsigned_8 := 16#01#; --  Branch
   Trace_Op_Br1 : constant Unsigned_8 := 16#02#; --  Fallthrough
   --  Op_Block execution terminated with branch taken in direction 0 or 1

   -------------------------------------------
   -- Decision Map or Trace Control Section --
   -------------------------------------------

   --  The section contents is a sequence of Trace Control Entries.

   --  Entries are meant to convey range of addresses where branch history is
   --  needed for mcdc computation purposes. The structure is piggybacked on
   --  that of the Execution Trace output section, which has everything to
   --  represent address ranges already.

end Qemu_Traces;
