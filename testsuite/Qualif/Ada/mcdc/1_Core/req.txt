Core expectations for MCDC assessments.
All the other sub-sections rely on this one.

%(req-headline)s

Compared to Decision Coverage, MCDC assessements enlarges the set of
expressions that shall be processed as decisions and introduces rules
regarding the operands that consistute the expressions.

We distinguish two categories of Boolean expressions for MCDC:

* *Complex* expressions, that feature at least two Boolean operands
  combined with AND-THEN or OR-ELSE short-circuit operators.

* *Simple* expressions, that are not complex per the preceding definition.

The types involved need not be restricted to the standard Boolean type; they
may subtypes or types derived from the Ada fundamental type.

In addition to any expression that directly influence control-flow constructs,
the tool shall process any *complex* Boolean expression as a decision,
regardless of the context where it apppears, for example on the right-hand
side of an assignment, as part of an object declaration initializer, as a
subprogram actual or within an active assertion pragma.

The Boolean operands of the short-circuit operators in a decision are called
*conditions*. Sub-decisions nesting becomes possible from the variety of
contexts where an expression needs to be treated as a decision. For example,
``if A and then Op (B or else C)`` has two decisions, one with two conditions
(B and C) used as an actual in a function call to Op, and an outer one with
two conditions as well (A and the function call itself).

All the DC rules apply unchanged to the full set of decisions as defined
here. Rule #3, about decisions evaluated both True and False, is complemented
by an additional rule:

======  =====================================================================
Rule #  Description
======  =====================================================================
3c      For expressions evaluated both True and False, the tool shall report
        every condition for which the independent effect was not
        demonstrated. Such condition specific diagnotics shall designate the
        particular condition source location.
======  =====================================================================

%(tstrategy-headline)s

The testing strategy is similar to the one chosen for the DC core requirement,
with the following set of testcases:

%(subset-index)s

Rules 1 to 3c are validated by variations exercised in every individual
testcase, where we consistenly check each decision of interest in multiple
manners, always including:

* a situation where the statements exposing the decision aren't
  executed at all (*rule #1*),

* a set of vectors where the decision evaluates only True (*rule #2*),

* a set of vectors where the decision evaluates only False (*rule #2*),

* sets of vectors where the decision evaluates both True and False, with
  at least

  * one set not demonstrating the independent effect of any condition
    (*rules #3 and 3c*),

  * one set demonstrating the independent effect of each condition alone
    (*rules #3 and 3c*),

  * one set demonstrating the independent effect of all the conditions
    (*rule #3 and 3c*).


