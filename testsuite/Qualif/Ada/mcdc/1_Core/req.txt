Define and validate the core expectations for MC/DC assessments.
All the other sub-sections rely on this one.

%(reqs-headline)s

Compared to Decision Coverage, MCDC assessements first enlarges the set
of expressions that shall be considered as decisions:

* In addition to expressions that directly influence control-flow constructs,
  the tool shall recognize as decisions *complex* Boolean expressions in any
  context where they might apppear, for example also on the right-hand side of
  an assignment, as part of an object declaration initializer, as a subprogram
  actual or within an active assertion pragma.

Even though direct subexpressions are still not decisions on their own,
sub-decisions nesting is possible from the variety of contexts where an
expression is considered a decision. For example, ``A and then Op (B or else
C)`` has two decisions, one with two conditions (B and C) used as an actual in
a function call to Op, and an outer one with two conditions as well (A and the
function call itself).

All the base DC requirements apply to the full set of decisions as defined
here. Subsidiary requirements are completed of refined as follows:

===============   ===========================================================
Requirement Id    Description
===============   ===========================================================
**cparteval**     For decisions evaluated both True and False, the tool shall
                  report every condition for which the independent effect was
                  not demonstrated. Such condition specific diagnotics shall
                  designate the particular condition source location.

**dnoeval**       When a decision is never evaluated even though the enclosing
                  statement or declaration has been executed (e.g. because of
                  a short-circuit or of an exception occurrence), the decision
		  shall be reported as never evaluated.
===============   ===========================================================

%(tstrategy-headline)s

To address *dcomplete* and *dnoeval*, we expose three main subsets of
testcases:

%(subset-index)s

Through all of them, we consistenly exercise each decision of interest in
multiple manners, always including:

* a set of vectors where the decision evaluates only True (*dparteval*),

* a set of vectors where the decision evaluates only False (*dparteval*),

* sets of vectors where the decision evaluates both True and False, with
  at least

  * one set not demonstrating the independent effect of any condition
    (*cparteval*),

  * one set demonstrating the independent effect of each condition alone
    (*cparteval*),

  * one set demonstrating the independent effect of all the conditions
    (*dcovered*).

* a situation where the statements exposing the decision aren't
  executed at all (*snoexec*).

