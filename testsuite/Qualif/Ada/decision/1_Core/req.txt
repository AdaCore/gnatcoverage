The tool shall recognize as decisions

* Any expression that influences the behavior of language control constructs
  (if, while, for, and Ada exit-when), as well as the implicit tests generated
  for active assertion pragmas;

* Any expression that features at least two conditions combined with and-then
  or or-else short-circuit operators, not necessarily within one of the
  aforementioned control constructs (for example on the right-hand side of an
  assignment as well).

The expression types involved shall not necessarily be the standard language
boolean type. In this context:

1. When a decision is enclosed in a statement or declaration that has not been
   executed, that statement or declaration shall be reported as not covered
   and nothing shall be reported about the decision.

2. When a decision is never evaluated even though the enclosing statement or
   declaration has been executed, the decision shall be reported as never
   evaluated.

3. When a decision is evaluated only true or false, it shall be reported as
   only partially covered. In this case as in the previous one, the tool shall
   designate the decision with an unambiguous file-name:line#:col# reference.

4. When a decision is evaluated both true and false, no decision coverage
   violation shall be reported for it.

5. The tool shall be able to handle arbitrarily complex decisions in any
   context where such expressions might appear.

**Testing Strategy**

We check that all the aspects of this requirement are satisfied
in a variety of situations:

* Operands: expressions involving different kinds of operands, not only simple
  boolean variables.

* Contexts: expressions of different kinds placed in various contexts, to
  verify the tool's capability to handle arbitrary expressions everywhere
  they might appear.

We exercise each decision of interest in multiple manners, always including

* a set of vectors where the decision evaluates only true,

* a set of vectors where the decision evaluates only false,

* a set of vectors where the decision evaluates both true and false,

* a situation where the statements exposing the decision aren't
  executed at all.

