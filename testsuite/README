--------------
-- Contents --
--------------

This is a python driven testsuite for the Couverture project.

Most tests use gprbuild to build programs for run/anlysis by xcov/qemu.
Programs are most often Ada + c/asm low-level support bits to provide
the bare qemu board init sequence & minimal IO support.

The testsuite driver is <topdir>/testsuite.py.
It scans the subdirectories for "test.py" instances and runs every one
it finds after switching to where it was found.

A bunch of common facilities for all the tests is provided in
<topdir>/test_utils.py.

After test runs, each test directory contains:

  test.py.log, a list of all the commands executed by the test.
  test.py.out, all the produced outputs.
  test.py.err, all the produced outputs.

The toplevel directory contains res_couverture and rep_couverture
synthesis files in addition.

As of today we maintain essentially one subtree:

* Down the "Qualif" subdirectory reside our current set of do178
  "qualification" tests. See the "content.txt" file there for more info
  on the organization of this part.

This is all still "under construction" so subject to change.

-------------------
-- Prerequisites --
-------------------

 * At the testsuite dir level, a "support" subdirectory corresponding
   to the one in ../tools/xcov/examples, for example

 ln -s ../tools/xcov/examples/support support

 * a target compiler supporting -fpreserve-control-flow (e.g GNAT Pro 6.3.2)

 * gprbuild >= 1.3.0

 * gnatpython (and rlimit)
 To install it:
 svn checkout svn://scm.forge.open-do.org/scmrepos/svn/gnatpython/trunk/gnatpython  support/gnatpython
 export PYTHONPATH=`pwd`/support/gnatpython
 Compile rlimit and add it to your PATH.

 * The xcov & qemu binaries you wish to exercise

-----------------------
-- Running the tests --
-----------------------

For a powerpc-elf target, run:
  ./testsuite.py --diffs --target=ppc-elf

To run a specific set of tests, append a regexp of test directory names to
this command line.

---------------------
-- Common failures --
---------------------

* "gprbuild: configuration and target switches cannot be used together"

  Typical cause : Too old version of gprbuild (< 1.3.0) on PATH.
  Way around    : Arrange to get a more recent one.

* "gprbuild: no target specified in configuration file"

  Typical cause : The .cgpr file in 'support/lib/<target>/<target>.cgpr' was
                  produced with too old a version of gprbuild.
  Way around    : Remove it.

-----------------------------------------
-- General python support architecture --
-----------------------------------------

The toplevel driver is testsuite.py. It spawns independant instances of
test.py:
                    
  testsuite.py ---o-spawn-> subdir1/test.py
                  |
		  o-spawn-> subdir2/test.py

We provide a few modules of facilities to help test writers and allow
sharing pickled data between tests and the toplevel driver, required for
the production of qualification "test-results" reports. Below is a rough
sketch of the overall architecture:

Modules are split in two packages:

  SUITE - set of modules relevant across the entire set of tests
  SCOV  - set of modules relevant for source coverage tests in particular

The split in modules is designed to isolate ~standalone functional facilities
and cut harmful dependencies.

Each test relies on a single Test object, which holds and controls the test
execution context (switch to initial test directory, parse command line
options, maintain execution status, ...). This facility is offered by the
SUITE.context module, which instanciates the object, and needs to be imported
only in a test.py context. Any dependency on the "current test context" module
from the toplevel driver makes no sense at all and would most probably cause
a testsuite failure.

This settled, we have:

 SUITE
 -----
   cutils.py  : Common utilities, for both tests and the toplevel driver
                [e.g. to_list(blob), contents_of(filename), ...]

   context.py : Current test context [Test class, "thistest" instance]

   tutils.py  : Common utilities that depend on "thistest" instance, so
                for tests only [xrun, gprbuild, ???]

   qdata.py   : Qualification reports facilities, to allow queuing
                pickled data between tests and the toplevel driver

 SCOV
 ----
   tc.py      : TestCase class for source coverage tests

   report.py  : Format checker for qualified reports, 

   map.py     : MapChecker class for xcov map-routines tests

   internals
   ---------
     cnotes.py    : Classes to represent expected or emitted coverage notes

     driver.py    : Class to help drive a source coverage test [SCOV_helper]

     expanders.py : Expand coverage note instances from xcov reports or from
                    expectation-specs + sources

     xnotep.py    : Class to represent user expectation patterns

     segments.py :  Source segment abstractions [line, line:col, ...], to
                    help check for inclusions.

     tfiles.py :    Text files (and lines) abstractions to automate processing
                    on read and assign numbers to lines.
                     
